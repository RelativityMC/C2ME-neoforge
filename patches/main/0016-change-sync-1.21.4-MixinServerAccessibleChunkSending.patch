From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Fri, 24 Jan 2025 22:11:49 +0800
Subject: [PATCH] change: sync 1.21.4 MixinServerAccessibleChunkSending


diff --git a/c2me-notickvd/src/main/java/com/ishland/c2me/notickvd/mixin/MixinServerAccessibleChunkSending.java b/c2me-notickvd/src/main/java/com/ishland/c2me/notickvd/mixin/MixinServerAccessibleChunkSending.java
index 4bb24b66..21ada3b6 100644
--- a/c2me-notickvd/src/main/java/com/ishland/c2me/notickvd/mixin/MixinServerAccessibleChunkSending.java
+++ b/c2me-notickvd/src/main/java/com/ishland/c2me/notickvd/mixin/MixinServerAccessibleChunkSending.java
@@ -1,18 +1,32 @@
 package com.ishland.c2me.notickvd.mixin;
 
+import com.google.common.collect.ImmutableList;
+import com.ishland.c2me.base.common.threadstate.ThreadInstrumentation;
 import com.ishland.c2me.base.mixin.access.IThreadedAnvilChunkStorage;
 import com.ishland.c2me.rewrites.chunksystem.common.ChunkLoadingContext;
 import com.ishland.c2me.rewrites.chunksystem.common.ChunkState;
+import com.ishland.c2me.rewrites.chunksystem.common.Config;
 import com.ishland.c2me.rewrites.chunksystem.common.NewChunkHolderVanillaInterface;
 import com.ishland.c2me.rewrites.chunksystem.common.NewChunkStatus;
 import com.ishland.c2me.rewrites.chunksystem.common.statuses.ServerAccessibleChunkSending;
+import com.ishland.c2me.rewrites.chunksystem.common.threadstate.ChunkTaskWork;
 import com.ishland.flowsched.scheduler.Cancellable;
 import com.ishland.flowsched.scheduler.ItemHolder;
 import com.ishland.flowsched.scheduler.KeyStatusPair;
+import it.unimi.dsi.fastutil.shorts.ShortList;
+import it.unimi.dsi.fastutil.shorts.ShortListIterator;
+import net.minecraft.block.Block;
+import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
 import net.minecraft.server.world.ServerChunkLoadingManager;
+import net.minecraft.server.world.ServerWorld;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
+import net.minecraft.world.ChunkRegion;
 import net.minecraft.world.chunk.Chunk;
+import net.minecraft.world.chunk.ChunkGenerationSteps;
 import net.minecraft.world.chunk.ChunkStatus;
+import net.minecraft.world.chunk.ProtoChunk;
 import net.minecraft.world.chunk.WorldChunk;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;
@@ -24,6 +38,7 @@ import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
+import java.util.ArrayList;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
@@ -56,7 +71,48 @@ public class MixinServerAccessibleChunkSending {
      */
     @Overwrite(remap = false)
     public CompletionStage<Void> upgradeToThis(ChunkLoadingContext context, Cancellable cancellable) {
-        return CompletableFuture.runAsync(() -> sendChunkToPlayer(context.tacs(), context.holder()), ((IThreadedAnvilChunkStorage) context.tacs()).getMainThreadExecutor());
+        ArrayList<BlockPos> blocksToRemove = new ArrayList<>();
+        if (Config.suppressGhostMushrooms) {
+            ServerWorld serverWorld = ((IThreadedAnvilChunkStorage) context.tacs()).getWorld();
+            ChunkState state = context.holder().getItem().get();
+            ChunkRegion chunkRegion = new ChunkRegion(serverWorld, context.chunks(), ChunkGenerationSteps.GENERATION.get(ChunkStatus.FULL), state.protoChunk());
+            Chunk chunk = state.chunk();
+
+            ChunkPos chunkPos = context.holder().getKey();
+
+            ShortList[] postProcessingLists = chunk.getPostProcessingLists();
+            for (int i = 0; i < postProcessingLists.length; i++) {
+                if (postProcessingLists[i] != null) {
+                    for (ShortListIterator iterator = postProcessingLists[i].iterator(); iterator.hasNext(); ) {
+                        short short_ = iterator.nextShort();
+                        BlockPos blockPos = ProtoChunk.joinBlockPos(short_, chunk.sectionIndexToCoord(i), chunkPos);
+                        BlockState blockState = chunk.getBlockState(blockPos);
+
+                        if (blockState.getBlock() == Blocks.BROWN_MUSHROOM || blockState.getBlock() == Blocks.RED_MUSHROOM) {
+                            if (!blockState.canPlaceAt(chunkRegion, blockPos)) {
+                                blocksToRemove.add(blockPos);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        return CompletableFuture.runAsync(() -> {
+            try (var ignored = ThreadInstrumentation.getCurrent().begin(new ChunkTaskWork(context, (ServerAccessibleChunkSending) (Object) this, true))) {
+                if (Config.suppressGhostMushrooms) {
+                    ServerWorld serverWorld = ((IThreadedAnvilChunkStorage) context.tacs()).getWorld();
+                    ChunkState state = context.holder().getItem().get();
+                    Chunk chunk = state.chunk();
+                    for (BlockPos blockPos : blocksToRemove) {
+                        serverWorld.setBlockState(blockPos, Blocks.AIR.getDefaultState(), Block.NO_REDRAW | Block.FORCE_STATE);
+                    }
+                    for (BlockPos blockPos2 : ImmutableList.copyOf(chunk.getBlockEntityPositions())) {
+                        chunk.getBlockEntity(blockPos2);
+                    }
+                }
+                sendChunkToPlayer(context.tacs(), context.holder());
+            }
+        }, ((IThreadedAnvilChunkStorage) context.tacs()).getMainThreadExecutor());
     }
 
     @Unique
diff --git a/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/common/statuses/ServerAccessible.java b/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/common/statuses/ServerAccessible.java
index efc8596a..b973b73a 100644
--- a/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/common/statuses/ServerAccessible.java
+++ b/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/common/statuses/ServerAccessible.java
@@ -45,32 +45,6 @@ public class ServerAccessible extends NewChunkStatus {
         Preconditions.checkState(chunk instanceof ProtoChunk, "Chunk must be a proto chunk");
         ProtoChunk protoChunk = (ProtoChunk) chunk;
 
-        if (Config.suppressGhostMushrooms) {
-            try (var ignored = ThreadInstrumentation.getCurrent().begin(new ChunkTaskWork(context, this, true))) {
-                ServerWorld serverWorld = ((IThreadedAnvilChunkStorage) context.tacs()).getWorld();
-                ChunkRegion chunkRegion = new ChunkRegion(serverWorld, context.chunks(), ChunkGenerationSteps.GENERATION.get(ChunkStatus.FULL), chunk);
-
-                ChunkPos chunkPos = context.holder().getKey();
-
-                ShortList[] postProcessingLists = protoChunk.getPostProcessingLists();
-                for (int i = 0; i < postProcessingLists.length; i++) {
-                    if (postProcessingLists[i] != null) {
-                        for (ShortListIterator iterator = postProcessingLists[i].iterator(); iterator.hasNext(); ) {
-                            short short_ = iterator.nextShort();
-                            BlockPos blockPos = ProtoChunk.joinBlockPos(short_, protoChunk.sectionIndexToCoord(i), chunkPos);
-                            BlockState blockState = protoChunk.getBlockState(blockPos);
-
-                            if (blockState.getBlock() == Blocks.BROWN_MUSHROOM || blockState.getBlock() == Blocks.RED_MUSHROOM) {
-                                if (!blockState.canPlaceAt(chunkRegion, blockPos)) {
-                                    protoChunk.setBlockState(blockPos, Blocks.AIR.getDefaultState(), false); // TODO depends on the fact that the chunk system always locks the current chunk
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
         return CompletableFuture.runAsync(() -> {
             try (var ignored = ThreadInstrumentation.getCurrent().begin(new ChunkTaskWork(context, this, true))) {
                 ServerWorld serverWorld = ((IThreadedAnvilChunkStorage) context.tacs()).getWorld();
diff --git a/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/mixin/MixinWorldChunk.java b/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/mixin/MixinWorldChunk.java
deleted file mode 100644
index 7746bcbc..00000000
--- a/c2me-rewrites-chunk-system/src/main/java/com/ishland/c2me/rewrites/chunksystem/mixin/MixinWorldChunk.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.ishland.c2me.rewrites.chunksystem.mixin;
-
-import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
-import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
-import net.minecraft.block.entity.BlockEntity;
-import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;
-import net.minecraft.registry.Registry;
-import net.minecraft.server.network.ServerPlayerEntity;
-import net.minecraft.server.world.ServerWorld;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.ChunkPos;
-import net.minecraft.world.HeightLimitView;
-import net.minecraft.world.World;
-import net.minecraft.world.biome.Biome;
-import net.minecraft.world.chunk.Chunk;
-import net.minecraft.world.chunk.ChunkSection;
-import net.minecraft.world.chunk.UpgradeData;
-import net.minecraft.world.chunk.WorldChunk;
-import net.minecraft.world.gen.chunk.BlendingData;
-import org.jetbrains.annotations.Nullable;
-import org.spongepowered.asm.mixin.Final;
-import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.Shadow;
-import org.spongepowered.asm.mixin.injection.At;
-
-import java.util.List;
-
-@Mixin(WorldChunk.class)
-public abstract class MixinWorldChunk  extends Chunk {
-
-    @Shadow @Final private World world;
-
-    public MixinWorldChunk(ChunkPos pos, UpgradeData upgradeData, HeightLimitView heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, @Nullable ChunkSection[] sectionArray, @Nullable BlendingData blendingData) {
-        super(pos, upgradeData, heightLimitView, biomeRegistry, inhabitedTime, sectionArray, blendingData);
-    }
-
-    @WrapOperation(method = "runPostProcessing", at = @At(value = "INVOKE", target = "Lnet/minecraft/world/chunk/WorldChunk;getBlockEntity(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/entity/BlockEntity;"))
-    private BlockEntity syncBlockEntities(WorldChunk instance, BlockPos pos, Operation<BlockEntity> original) {
-        if (this.world instanceof ServerWorld serverWorld) {
-            BlockEntity blockEntity = original.call(instance, pos);
-            if (blockEntity == null) return null;
-
-            List<ServerPlayerEntity> playersWatchingChunk = serverWorld.getChunkManager().chunkLoadingManager.getPlayersWatchingChunk(this.getPos(), false);
-            BlockEntityUpdateS2CPacket packet = BlockEntityUpdateS2CPacket.create(blockEntity);
-            for (ServerPlayerEntity player : playersWatchingChunk) {
-                player.networkHandler.send(packet);
-            }
-
-            return blockEntity;
-        } else {
-            return original.call(instance, pos);
-        }
-    }
-
-}
diff --git a/c2me-rewrites-chunk-system/src/main/resources/c2me-rewrites-chunk-system.mixins.json b/c2me-rewrites-chunk-system/src/main/resources/c2me-rewrites-chunk-system.mixins.json
index d54edac4..47e86bf4 100644
--- a/c2me-rewrites-chunk-system/src/main/resources/c2me-rewrites-chunk-system.mixins.json
+++ b/c2me-rewrites-chunk-system/src/main/resources/c2me-rewrites-chunk-system.mixins.json
@@ -14,7 +14,6 @@
     "MixinSerializingRegionBasedStorage",
     "MixinServerChunkManager",
     "MixinThreadedAnvilChunkStorage",
-    "MixinWorldChunk",
     "async_serialization.MixinBlender",
     "async_serialization.MixinChunkRegion",
     "async_serialization.MixinChunkSerializer",
